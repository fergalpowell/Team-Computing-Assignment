#pragma config(Sensor, S1,     sonarSensor,    sensorSONAR)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     touchSensor,    sensorTouch)
#pragma config(Sensor, S4,     soundSensor,    sensorSoundDB)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//Function prototype
void Linecounter();
void BlackCell();
void Forward();
void Reverse();
void TurnLeft();
void TurnRight();
void Stop();
void SonarCheck();

task main()
{
	BlackCell();
}

void Linecounter()
{
	int count=0;
	int count2=0;
	ClearTimer(T1);

	while (time1(T1) < 5000)
	{
		Forward();

		if (SensorValue(lightSensor) < 45)
		{
			while (count2==0)
			{
				if (SensorValue(lightSensor) > 45)
				{
					count++;
					count2=1;
					wait1Msec(20);
				}//End inner if
			}//End inner while
		}//End outer if

		nxtDisplayCenteredTextLine(3, "%d", count);
		count2=0;

	}//End  outer while

	motor[motorB] = 0;
	motor[motorC] = 0;
}//End linecounter

void BlackCell()
{
	ClearTimer(T1);

	while(time1(T1) < 3000)
	{
		while(SensorValue(lightSensor) > 40)
				{
					nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
					nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

					nMotorEncoder[motorB] = 0;
					nMotorEncoder[motorC] = 0;

					Forward();

					int motorBturns = nMotorEncoder[motorB];
					int motorCturns = nMotorEncoder[motorC];

					Forward();

					if(SensorValue(lightSensor) < 40 )
					{
						TurnLeft();
					}//end if

				}//end inner while
			}//End oute while
}//end black_lines()

void Forward()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;	

	motor[motorB]=30;
	motor[motorC]=30;
	wait1Msec(300);
}

void Reverse()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;	

	motor[motorB]=-30;
	motor[motorC]=-30;
	wait1Msec(300);
}

void TurnLeft()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
	nMotorEncoderTarget[motorB] = 189;
	nMotorEncoderTarget[motorC] = -189;
	
	motor[motorB]=30;
	motor[motorC]=-30;
	
	while( nMotorRunState[motorC]!=runStateIdle)
	{}

	motor[motorB]=0;
	motor[motorB]=0;
}

void TurnRight()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
	nMotorEncoderTarget[motorB]=187;
	nMotorEncoderTarget[motorC]=-187;
	
	motor[motorB]=-30;
	motor[motorC]=30;
	
	while( nMotorRunState[motorC]!=runStateIdle)
	{}

	motor[motorB]=0;
	motor[motorB]=0;	
}

void Stop()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
	motor[motorB]=0;
	motor[motorC]=0;
}
