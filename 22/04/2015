#pragma config(Sensor, S1,     sonarSensor,    sensorSONAR)
#pragma config(Sensor, S2,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S3,     touchSensor,    sensorTouch)
#pragma config(Sensor, S4,     soundSensor,    sensorSoundDB)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

//Function prototype
void navigate();
void forward();
void reverse();
void turn();
void noMove();

int currentRow = 0;
int currentColumn = 3;
int direction = 3;
int begin = 1;
	// 1 = north
	// 2 = south
	// 3 = east
	// 4 = west
int lastTurn = 1;//0 menas  right, 1 means left

task main()
{
	navigate();
}

void navigate()
{
	while(true)
	{
		while(SensorValue(lightSensor) > 35)
		{
			nxtDisplayCenteredTextLine(0, "Row[%d] Col[%d]",currentRow, currentColumn);
			wait1Msec(250);

			nMotorPIDSpeedCtrl[motorB] = mtrSpeedReg;
			nMotorPIDSpeedCtrl[motorC] = mtrSpeedReg;

			nMotorEncoder[motorB] = 0;
			nMotorEncoder[motorC] = 0;

			forward();
		}//end inner while

		if(SensorValue(lightSensor) < 35 )
		{
			reverse();
			turn();
		}//end outer if
	}//end outer while
}//end black_lines()

void forward()
{
	bool onEdge = false;
	onEdge = ( (currentRow == 9 && (currentColumn >= 0 && currentColumn <= 9)) || //Checkin if it is on the edge of the grid
						(currentRow == 0 && (currentColumn >= 0 && currentColumn <= 9)) ||
						(currentColumn == 0 && (currentRow >= 0 && currentRow <= 9)) ||
						(currentColumn == 9 && (currentRow >= 0 && currentRow <= 9))
						);
	if(begin == 0)//Checking if it isn't in the start position
	{
		if ( !(onEdge))
		{
			nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
			nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
			nMotorEncoder[motorB] = 0;
			nMotorEncoder[motorC] = 0;
	
			nMotorEncoderTarget[motorB]=270;
			nMotorEncoderTarget[motorC]=270;
	
			motor[motorB]=30;
			motor[motorC]=30;
	
			//Updating the current cell location
			switch(direction)
			{
				case 1:
				{
					currentColumn++;
					break;
				}
	
				case 2:
				{
					currentColumn--;
					break;
				}
				case 3:
				{
					currentRow++;
					break;
				}
	
				case 4:
				{
					currentRow--;
					break;
				}
			}
		}
		else
		{
			reverse();
			turn();
		}
	}//end outer if
	else
	{
		nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
		nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;

		nMotorEncoder[motorB] = 0;
		nMotorEncoder[motorC] = 0;

		nMotorEncoderTarget[motorB]=270;
		nMotorEncoderTarget[motorC]=270;

		motor[motorB]=30;
		motor[motorC]=30;

		//Updating the current cell location
		switch(direction)
		{
			case 1:
			{
				currentColumn++;
				break;
			}

			case 2:
			{
				currentColumn--;
				break;
			}

			case 3:
			{
				currentRow++;
				break;
			}

			case 4:
			{
				currentRow--;
				break;
			}
		}
		
		begin = 0;	
	}
}

void reverse()
{
	motor[motorB]=-30;
	motor[motorC]=-30;
	
	switch(direction)
	{
		case 1:
		{
			currentColumn--;
			break;
		}
		case 2:
		{
			currentColumn++;
			break;
		}

		case 3:
		{
			currentRow--;
			break;
		}

		case 4:
		{
			currentRow++;
			break;
		}
	}
}

void turn()
{
	if(lastTurn == 1)//turn left
	{
		nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
		nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
		nMotorEncoder[motorB] = 0;
		nMotorEncoder[motorC] = 0;
	
		nMotorEncoderTarget[motorB] = 189;
		nMotorEncoderTarget[motorC] = -189;
	
		motor[motorB]=30;
		motor[motorC]=-30;
	
		while( nMotorRunState[motorC]!=runStateIdle)
		{}
	
		motor[motorB]=0;
		motor[motorC]=0;
	
		switch(direction)
		{
			case 1:
			{
				direction = 4;
				break;
			}
	
			case 2:
			{
				direction = 3;
				break;
			}
	
			case 3:
			{
				direction = 1;
				break;
			}
	
			case 4:
			{
				direction = 2;
				break;
			}
		}//End switch
	}//end if
	else//turn right
	{
		nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
		nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;
	
		nMotorEncoder[motorB] = 0;
		nMotorEncoder[motorC] = 0;
	
		nMotorEncoderTarget[motorB]=187;
		nMotorEncoderTarget[motorC]=-187;
	
		motor[motorB]=-30;
		motor[motorC]=30;
	
		while( nMotorRunState[motorC]!=runStateIdle)
		{}

		motor[motorB]=0;
		motor[motorC]=0;
	
		switch(direction)
		{
			case 1:
			{
				direction = 3;
				break;
			}
	
			case 2:
			{
				direction = 4;
				break;
			}
	
			case 3:
			{
				direction = 2;
				break;
			}
	
			case 4:
			{
				direction = 1;
				break;
			}
		}//End swich
	}//End else
	
	lastTurn = rand() % 2;
}//end turn()

void noMove()
{
	nMotorPIDSpeedCtrl[motorB]=mtrSpeedReg;
	nMotorPIDSpeedCtrl[motorC]=mtrSpeedReg;

	motor[motorB]=0;
	motor[motorC]=0;
}
